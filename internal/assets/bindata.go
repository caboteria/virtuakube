// Code generated by go-bindata. DO NOT EDIT.
// sources:
// addon-images (537B)
// registry.yaml (1.01kB)
// net/calico.yaml (16.737kB)
// net/flannel.yaml (10.598kB)
// net/weave.yaml (6.87kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _addonImages = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xca\x5d\xae\x82\x30\x10\x40\xe1\xad\xdc\x0d\x30\xf4\x02\x92\xd8\xdd\x8c\xc3\xa8\x0d\xa5\x53\xa7\xfc\xd8\xdd\x1b\xa3\x6f\x44\xe3\x43\xdf\x4e\x72\x3e\xe5\x8b\x4b\xb3\x66\xdb\xfc\xdd\x16\xcc\xe0\xa4\x26\xf4\x8e\xa4\x9e\x73\xbc\xa2\x5d\x5b\x68\x61\xf7\x82\x0c\xfc\x61\x51\x70\xbb\x23\xca\x92\xea\xb3\xc7\x10\xd8\xdb\xd5\xc0\xbf\x01\x53\xe1\x34\xf4\x5d\x19\xa4\x53\x39\x54\x80\xc4\x48\x7d\xe7\xb9\x10\x4b\xed\xd1\xdc\x7f\x43\x83\xd0\xc8\xfa\x64\x1b\xe3\xca\x9b\xe8\x98\x5e\x59\x8d\xcb\x89\x6d\x03\x07\x30\xdf\x54\x88\xf4\x46\x8f\x00\x00\x00\xff\xff\x57\x5d\xf6\x60\x19\x02\x00\x00"

func addonImagesBytes() ([]byte, error) {
	return bindataRead(
		_addonImages,
		"addon-images",
	)
}

func addonImages() (*asset, error) {
	bytes, err := addonImagesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "addon-images", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf1, 0xa8, 0x2d, 0x34, 0xd3, 0xcb, 0x24, 0x3, 0xad, 0xf3, 0xbc, 0x27, 0x84, 0x92, 0x8e, 0xbe, 0x56, 0x48, 0x9e, 0x87, 0x74, 0x94, 0xe0, 0xb9, 0x74, 0xd5, 0xd0, 0x83, 0x8e, 0xf3, 0x0}}
	return a, nil
}

var _registryYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\x6b\xdb\x40\x10\xbd\xef\xaf\x18\x72\x57\x64\xb7\xf4\xb2\xb7\x10\xa9\xa9\xa1\xa9\x8d\x24\x0a\x3e\x99\xb1\x3c\xa4\x4b\xf6\x8b\xdd\xb1\xa8\x28\xfd\xef\x65\x1b\x4b\x91\x22\xb7\xb7\xcc\x49\x3c\xcd\x7b\xf3\x66\xf6\x65\x59\x26\xd0\xab\xef\x14\xa2\x72\x56\x02\xfd\x64\xb2\xe9\x33\xe6\xdd\xfa\x48\x8c\x6b\xf1\xac\xec\x49\x42\x41\x5e\xbb\xde\x90\x65\x61\x88\xf1\x84\x8c\x52\x00\x58\x34\x24\x21\xd0\x93\x8a\x1c\xfa\x0b\x10\x3d\xb6\x24\xe1\xf9\x7c\xa4\x2c\xf6\x91\xc9\x08\x00\x8d\x47\xd2\x31\x71\x00\xd0\xfb\x09\x29\x7a\x6a\x13\x1e\xc8\x6b\xd5\x62\x94\xb0\x16\x00\x4c\xc6\x6b\x64\x7a\x61\x4c\x67\xa6\x9a\xaa\x2d\x15\x13\x32\xa8\xa6\xb2\xee\x44\x35\x69\x6a\xd9\x85\x57\x4e\x42\xb3\xe0\x34\xdd\x26\xa7\xc1\x12\x53\xbc\x55\x2e\x37\x18\x99\x82\x84\x9b\x9b\x4b\x6b\xeb\x2c\xa3\xb2\x14\xc6\x81\xd9\x72\xf1\x97\x52\x06\x9f\x26\xb8\xfc\x30\xfe\x21\xdb\xbd\x8e\x1e\xf8\x55\xf9\xb0\xa9\x9b\x6a\x7f\xf8\xd2\x34\xbb\xc3\x5d\x51\x54\x63\x0b\x40\x87\xfa\x4c\x12\xe4\xa7\xd5\x6a\xf5\x6f\x66\xdd\x6c\xab\xbb\x87\xf2\xf0\x79\xf3\xb5\xac\xf7\x75\x53\x3e\x1e\xaa\xed\xb6\x29\x36\x55\x79\xdf\x6c\xab\xfd\x52\x30\xef\x30\xe4\x5a\x1d\xf3\x85\xfb\xce\xe9\xb3\xa1\x47\x77\xb6\x1c\x97\x66\xff\xee\x96\x45\x76\x81\x26\xa2\x26\x75\xef\x90\x7f\xfc\x4f\xd8\xbb\x30\x57\x1c\x4f\xba\x73\x81\x25\xcc\x56\xbc\x92\xaa\x51\x27\x38\x76\xad\xd3\x12\x9a\xfb\x9d\x98\x9a\x5e\x3c\xcd\x35\xb7\x64\x3c\xf7\x85\x0a\x12\x7e\xfd\x16\x6f\xa3\xdf\x0d\x51\xaf\x29\x74\xaa\xa5\x77\xcb\x39\xf7\x9e\x24\x7c\x73\x27\x4a\xcb\x8b\xc9\x75\xae\xc6\xca\xcf\x2f\x64\x2f\x3c\x09\x1f\x57\x03\xf6\xf6\x2c\x71\x96\xf5\xb9\x8b\x3f\x01\x00\x00\xff\xff\x44\x90\xb8\xd2\xf2\x03\x00\x00"

func registryYamlBytes() ([]byte, error) {
	return bindataRead(
		_registryYaml,
		"registry.yaml",
	)
}

func registryYaml() (*asset, error) {
	bytes, err := registryYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registry.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x66, 0x9, 0xb0, 0x75, 0xb4, 0x7c, 0x58, 0xcc, 0x66, 0x99, 0x31, 0xd8, 0xaa, 0x58, 0x8b, 0xc1, 0xb6, 0xca, 0x1f, 0x83, 0xc0, 0xc1, 0x71, 0x9c, 0xec, 0xf1, 0xb1, 0x8f, 0x2e, 0x50, 0x5c}}
	return a, nil
}

var _netCalicoYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x5b\x73\xdb\xb8\x92\x7e\xf7\xaf\xe8\x92\x1f\x66\xf7\x94\x29\x3b\x97\x33\x9b\x70\x9f\x64\x59\x71\x54\xb1\x25\x95\x25\x67\x76\x6a\x6a\x4b\x03\x91\x2d\x09\x6b\x10\xe0\x01\x40\x39\x9a\xdd\xf3\xdf\xb7\x70\xe1\x55\xa4\x1c\x67\x26\xce\xd1\x93\x4d\x00\xdd\x8d\x0f\x8d\xbe\x01\x38\x85\x21\x61\x34\x12\xf0\x19\xa5\xa2\x82\xc3\xee\x4d\xff\x4d\xff\xf5\xc9\x29\x6c\xb5\x4e\x55\x78\x7e\x1e\x8b\x48\xf5\x53\x29\xfe\x07\x23\x1d\xd9\xbe\x7d\x21\x37\xe7\xa6\xdf\xb9\x44\x86\x44\xa1\x3a\xf5\xa3\x1e\x28\x8f\x43\x18\xb2\x4c\x69\x94\x77\x82\xe1\x09\x49\xa9\xa7\x1c\x82\x5c\x91\xa8\x4f\x32\xbd\x15\x92\xfe\x41\x34\x15\xbc\xff\xf0\x4e\xf5\xa9\x38\xdf\xbd\x5a\xa1\x26\xaf\x4e\x12\xd4\x24\x26\x9a\x84\x27\x00\x9c\x24\x18\x82\xe3\x18\x70\x11\xe3\x89\xcc\x18\x2a\xd3\x14\x00\x49\xe9\xb5\x14\x59\xaa\x42\xf8\xad\xd7\xfb\xef\x13\x00\x00\x89\x4a\x64\x32\x72\x5d\xcc\x2f\xb0\x34\x54\x4a\x22\x54\xc5\x27\x85\x72\x47\x23\x24\x51\x24\x32\xae\xdd\xf7\x1d\xca\x55\x65\xd4\x06\x75\xf1\x37\xa3\xaa\xfc\xe7\x91\xe8\x68\xfb\x1c\xfe\xa9\x88\xd5\xb9\xd2\x44\x67\xad\x8c\xd2\x6f\xa1\xf7\x7d\x25\xf6\xf0\x1c\xe1\xf2\xd5\xa4\x90\xc7\xa9\xa0\x47\x31\xfe\xfa\x85\x14\xf1\x31\x99\x5a\x66\x9e\xa5\x31\xd1\xf8\x14\x10\xf8\x45\x23\x37\xda\xa9\x8e\xf0\x46\xfd\x28\xe4\x43\x2a\x18\x8d\xe8\x33\xa5\xe8\x60\xeb\x49\x52\xbe\xf1\x3b\xe0\x4f\x71\xcf\x99\xd4\xf8\x37\x38\x46\x32\x3e\xdc\xc4\xdd\x5c\x37\x4c\xac\x08\x5b\x23\xa3\x5f\x22\xc1\xd7\x74\x53\x6e\xa0\xca\xc7\x4c\xda\x5d\x5c\xb6\xad\x36\x69\x8a\x28\x55\x83\xce\x6a\x93\x36\xa9\x14\x9f\x0e\x68\xd0\x34\x15\x82\x35\x49\xb4\xc1\x70\xd0\xaa\x50\xab\xa3\xc0\x99\xef\x91\xb3\x4e\x94\xaf\x85\x4c\x1a\xbc\xb7\x42\xe9\xa3\x6a\x1b\x49\xac\x6a\xd5\xf3\xb4\xef\x24\x08\x82\x93\x67\x5a\xc4\x03\x8b\x7a\x49\x79\x4c\xf9\xe6\x29\x53\x29\x18\xde\xe1\xda\x34\xe6\x6a\x70\x84\xdb\x09\xc0\xa1\xe5\x6e\x23\xab\xb2\x95\xd1\x20\x15\x9e\x04\x7e\xc4\xdc\xd9\x8b\x81\x33\xa7\xad\x83\xa0\x34\xc3\x21\x3c\x64\x2b\x0c\xd4\x5e\x69\x4c\x2c\x1c\x7f\xad\xff\x39\x85\xc5\x96\x2a\x48\x08\xa7\x6b\x54\x1a\x28\x8f\x58\x16\xa3\x02\xbd\x45\x58\x0b\xc6\xc4\x23\xe5\x1b\x88\x44\x92\x0a\x8e\x5c\x9b\xe5\xb5\xbb\x3f\x3c\x39\x05\xf0\x52\x9f\x1b\xa9\xc3\x82\x62\xf1\x39\xe2\x34\xff\x9a\x33\x1a\x5a\x15\xbe\x25\x29\x50\x05\x99\xc2\x18\xb4\x80\x5c\xaf\x11\x08\x28\x64\xeb\xc0\x6a\x55\x9c\x4f\x94\x72\xa5\x09\x63\x0e\xff\x7c\x7d\x73\x3a\x35\xed\xd8\x1d\x71\x88\x8e\x49\x37\xb6\xf9\xa0\x53\x58\x08\x40\x4e\x56\x0c\x61\xb1\x4f\xb7\xe4\x0c\x14\x6a\xd0\x46\x7a\x2d\xa0\xe7\xc9\x69\xd3\xd4\x83\xbf\x11\x1e\xff\xcd\x76\x20\xc0\x05\x0f\xfe\x40\x29\x60\x47\x58\x66\xd0\x93\x8e\x00\x48\x4c\x19\x8d\x88\xb2\xd4\x57\xc8\xc4\x63\x1f\xe0\x17\x04\x89\x91\x48\x12\xe4\x31\x64\xca\xa0\xec\x7a\xd3\x35\xec\x45\x06\x5b\xb2\x43\x48\x84\x44\xd0\x5b\xc2\xe1\xef\x17\xce\xa4\xf7\x61\xb0\x12\x3b\x84\x57\x17\xfe\x03\x50\x0d\xd4\x91\x46\xa5\x90\x6b\x4a\x58\xff\x04\xc0\x0a\xb8\xf4\xde\x69\xe9\xa0\xe8\x71\xc1\xb1\x67\xfb\x0e\x0b\xcc\xcd\x4a\x7b\xa4\x57\x24\x7a\x30\xe2\x68\x61\xd6\xc6\x50\x71\xb3\x5d\xfa\x86\x10\x7a\x2b\x2a\xe3\xde\x49\x0b\x89\xdb\xc5\xbd\x1f\x77\x62\x8c\x80\xde\x2e\x13\x9d\x85\xd0\x7b\xf5\xf6\xed\x85\x1f\xb0\x30\x9c\x26\xe3\xdc\xd0\x40\xcd\x9e\x99\xc1\x7e\xa5\x41\x70\x40\x12\x6d\xed\x04\xfb\x60\xc7\xa9\x14\x23\x4a\x98\xa5\x63\xf1\x55\x40\xb9\x5b\x15\x47\x06\x1e\x29\x63\xb0\x42\x20\x99\x16\xc6\x4c\x45\x84\xb1\x3d\xa4\x22\xcd\x18\xd1\x18\xdb\xd9\x70\xba\xf4\xcc\x97\x6e\x54\x08\xff\x17\x58\xa3\xf3\xbf\xde\xf4\xf4\x0c\x52\xbd\x10\x7a\x0f\xef\x54\x90\x8a\x38\xf0\xfd\x7b\x67\x79\x87\x88\xe7\x0a\x67\xba\x5d\xf4\xdf\xf4\x2f\xca\xc6\x94\x65\x1b\xca\x55\x2f\x84\xdf\xfc\xa7\x92\xb4\xed\xa0\xf7\xa9\x25\xef\x80\x2d\x06\xda\x36\x26\x36\x4b\x86\x3b\x64\xa6\x83\x31\xb7\xf5\x66\xa3\xa1\x4a\x0b\x89\xcb\x9c\x88\xd1\x5f\xc9\x51\xa3\xaa\xf7\x34\xb8\xe5\xf3\x58\x2e\x3f\xdd\x5f\x8e\xee\x26\xa3\xc5\x68\xbe\x9c\x4c\xaf\x46\xcb\xc9\xe0\x76\xb4\x5c\xd6\x47\x24\x3a\xeb\x85\xb0\x5c\x0e\x27\xe3\xe5\xed\xe2\x7e\xb9\xac\xb5\xd2\x94\x24\xbd\xb0\x36\x91\xca\x54\xcc\x6e\x0d\x98\x88\x08\xab\xd1\x04\xe8\xa9\x6c\xc5\x51\x9b\x3e\x99\xc2\x99\x88\x87\x34\x96\xbd\x4a\x97\x7f\xd6\xb8\x58\xc7\xb3\x3f\xe0\x53\xe1\xf4\xf0\x4e\x75\x0f\xaf\x80\xd1\x42\xc2\xb4\xba\x25\x2f\x41\x19\x4e\x27\x1f\xc6\xd7\xcb\x0f\xe3\x9b\xd1\x6c\xb0\xf8\xb8\x5c\xd6\x88\x9f\xb4\xb0\x69\x5d\xca\x54\x48\x9d\x90\xb4\x0e\xa8\xe2\xc4\x4c\x5c\xcb\x0c\x6b\xdf\x23\x92\x92\x15\x65\x54\x53\x27\xa7\x1d\x7d\x4b\xd2\x94\xf2\x8d\xf2\x03\x2a\xac\xfd\x5f\x2e\xec\xf8\xa7\x77\x88\x07\x56\xdb\x39\x59\x05\x24\xf7\x2e\x67\xf0\xb8\xa5\xd1\xb6\xd8\x13\x76\xff\xc6\xb0\xda\xfb\x9d\xfe\x93\xf2\xc6\x26\x26\x98\x18\xab\x7a\xea\xff\x57\x54\xdb\x8d\xb5\x42\xfd\x88\xc8\xe1\x83\x89\x5d\x80\x18\x9b\xb0\x45\x18\xcc\xc6\x36\xde\x45\x79\x06\x12\xe3\x2c\x32\x56\xab\xa0\xc8\x04\x89\xcd\xd6\xad\xf7\xec\x9f\x34\x4d\x74\xcd\x0f\x76\x1b\x6c\x6b\xc0\xba\xed\x35\x00\x23\x2b\x64\x3e\xd4\x30\xbb\x95\xa4\x69\x63\xb0\x31\x1a\xa6\xdd\x60\xec\x3b\x06\xf6\x9f\x10\xfe\xfe\xf6\x3f\xde\x78\x70\x53\x29\xb4\x88\x04\x0b\x61\x31\x9c\xf9\x6f\x9a\xc8\x0d\xea\x99\xed\xda\x90\xc7\xfc\x5a\x05\x55\xc8\x30\xd2\x42\x1e\x93\xc8\x2d\x60\xf7\xfa\x5d\x61\xca\xc4\x3e\x31\x9e\x56\xac\xfd\x9a\x68\x67\x98\x2d\xae\xc4\x1a\x7f\x6f\xd5\x1b\xd0\x92\x34\x55\x8d\x30\xa8\x24\xf7\x22\x38\x9f\xc2\x24\x4b\x56\x28\x4b\xd9\x73\xd7\x67\xac\xf8\x31\xb7\x7a\xe0\x3d\x4b\xc7\xaa\xb7\x68\x49\x1f\x3a\x34\xd8\x11\x49\x2d\x45\xea\xb4\xae\xe6\xea\x2b\xb1\x86\x45\xcd\x38\x80\x53\x4b\xe9\x9b\x5d\x6f\xbb\xef\x2d\xfd\xae\xa5\xfe\x6f\x8f\x5b\xe4\x9e\xac\x11\xea\x53\x61\x97\xa0\xb0\xe0\xff\xde\x07\xb8\x57\x08\x82\x63\x0e\x91\x8d\x17\x70\x87\x72\x6f\xe8\x07\xaf\x2f\x4a\xae\x63\x6e\x09\xa7\x52\xc4\x59\x64\x7c\xe5\x19\x3c\x56\xa7\x20\x33\xce\x0d\x37\xa2\xc1\x44\x77\x1a\xde\x14\xb8\x1b\x6c\xed\x4e\x75\x4e\x9a\x26\x29\x89\xac\x6a\x49\xc1\x98\x19\x93\xa5\x1b\x49\x62\x0b\x4e\x3e\x26\x84\x0b\xfb\xdf\x8e\x1a\xbd\xfa\x48\x8d\xc4\xfb\x1b\x9a\x50\x1d\xc2\x6b\x13\x59\x60\x92\x1a\x97\xea\x34\xa2\xaa\x57\xe6\x57\xd5\x96\x6e\x8d\x71\x6d\x84\x73\xa1\x5d\x46\x51\x0e\x70\x9b\xe3\x0c\x08\x13\xdc\x78\x75\xbd\x75\x21\x8a\xa4\xd6\xa7\x0f\xe2\x58\x70\x35\xe5\x6c\x0f\x5a\x30\xf4\xc1\x83\x8d\xaa\xce\x20\x21\xf2\xc1\xc5\xae\xa9\x88\x81\x98\x1d\x15\xf9\x71\x15\xfa\x24\x8e\x03\x03\x22\x72\x95\x49\x03\x02\xd5\x26\x31\x51\x90\x4a\x2a\x24\xd5\x7b\x50\xd1\x16\xe3\xcc\x02\xe4\x6c\x1f\xd1\x60\x2c\x63\x91\xf8\x01\x91\x66\x05\xac\x89\x8b\x2b\xa4\xe9\xda\x10\x33\xcb\xe8\x28\xe2\x8e\x46\x3e\xf8\x70\x3f\x4f\x19\x65\x9f\xb0\x74\x4b\xfa\xa5\xd7\x32\x49\x4c\x2e\xac\x89\x3c\x42\xf8\xe9\xa7\x62\x98\xcf\xc1\x02\x13\xdc\xa8\x88\x98\xf1\xf5\x91\x8a\xac\x31\xd0\x22\xb0\x0c\x43\xf8\xc9\xf8\x11\x37\x3c\xdf\x9c\xd6\x6e\x89\x18\xe7\x35\x33\x65\x7e\xc6\x62\x34\xc8\x09\x15\x02\xa3\x3c\xfb\xe2\x3b\x19\x1f\x3f\x71\x91\x90\xf3\x51\xb9\x9d\x2c\x96\xa0\xb6\x82\xb7\x44\x3e\xb4\x2f\x83\x07\xdf\x6a\xbb\xc4\x12\xe7\x12\xa1\x00\x1e\x70\x1f\xb6\xac\x77\xc5\x8d\x8a\xd4\x70\x15\x32\x84\xd1\x17\xaa\x8a\x1c\xf6\x14\xe6\x94\x47\x45\x38\x1b\x11\xfe\x93\x2e\xa2\x4d\x62\x85\xc9\xb8\xa6\x2c\xdf\xee\x0a\xb2\xd4\xee\x25\x8e\x2e\x13\x91\x19\xcf\xdb\xb4\xc9\x44\x0a\xba\x76\x0e\x36\xd0\xf1\xe4\x30\x36\xe4\x72\xa9\x55\x2d\xa9\x9b\xb4\x64\x74\x76\x11\x05\xd7\x84\x72\x94\x95\xfc\x98\x26\x64\x83\x21\xfc\x23\x23\x7b\xab\x00\x2e\x73\xb2\x9b\x24\xcf\x9d\xf2\x49\xb7\x5a\x6d\xef\xc2\x4a\x07\xe7\xc8\x16\xac\x66\x4d\x6f\xf7\x04\xa5\x76\x77\x08\x80\x7c\x17\x56\x3a\x9d\xc2\xc8\xd9\x72\x17\xa7\x02\x13\x9b\x8d\xd9\x2d\xab\x3d\xc4\xb8\x26\x19\xd3\x7d\x80\x21\x31\x1b\xd3\x19\x71\x01\xbd\x18\x57\xd9\xa6\xe7\xe2\x7c\xe3\xf1\x14\xda\x62\x81\x50\x54\xef\xfb\x15\xda\x81\x97\x6f\xf1\xeb\xec\xe3\x60\x79\x33\xbd\x9e\x8f\x3e\x8f\xee\xc6\x8b\x5f\xe7\xc3\xbb\xd1\x68\x52\x8b\xec\xac\xb3\xc8\xa3\xe5\x9a\x7c\x57\x54\x59\x01\x73\xc9\xb4\x80\x35\x65\x68\xf7\xb3\xda\x2b\x26\x36\xa0\xac\xb2\xe8\xad\x50\x08\xb1\x30\xba\x92\x90\x07\x23\x2f\x57\xd6\xa5\x94\x96\xfb\xa8\x78\x79\xfc\xd8\x2a\x58\x9e\x71\x3d\x3d\xb9\x5f\xe7\x5f\x45\xe0\x14\x6e\x05\xa7\x5a\xc8\xa6\x73\x31\x21\x97\x9d\xa4\x0f\xd6\x78\xe1\x8a\x73\xff\x60\xd3\x2b\x6e\xad\x97\xf1\x1a\xb8\x22\xcc\xfc\x5b\x23\x1e\x09\xce\xd1\x3a\x99\x23\x93\x1e\x4e\x27\x93\xd1\x70\x31\x9e\x4e\xee\x46\x97\x83\x9b\xc1\x64\x38\x9e\x5c\xdf\x4e\xaf\x46\xad\x33\xa8\x04\xe6\x9d\x14\xaf\x06\x8b\xc1\x7c\x31\xbd\x1b\x2d\x7e\x9d\x7d\x3b\x95\x8f\xa3\xc1\xcd\xe2\xe3\x68\x32\xb8\xbc\x19\x5d\xb5\x52\x31\xa6\xab\x8e\xe6\x3d\x77\x6e\xd4\x06\x1a\x0a\x8d\xd5\x43\xeb\x36\x7d\xb0\x92\x4a\x91\xa0\xde\x62\xa6\x8c\xab\x93\x34\x32\x1e\xd9\x99\x99\xc2\x8a\xd4\x0d\xc3\x59\x8d\xbe\x8d\x70\x44\x8a\x5c\x59\x0b\x24\x75\x1e\x22\x9b\x41\x79\x9c\x9e\x90\x7d\x61\x83\xec\x8e\x89\x32\x59\xf5\x1a\x00\xa7\xf5\x99\xce\xee\xa6\xb7\xa3\xc5\xc7\xd1\xfd\xfc\x76\xb4\xb8\x1b\x0f\xe7\x87\x93\x3e\x3d\x32\xeb\x27\x88\xcd\xa6\x77\x8b\x76\x4a\xef\x2f\xde\xbf\x29\x29\x31\xba\x43\x8e\x4a\xcd\xa4\x58\x61\xd5\x3c\xe0\x97\xd2\xe7\xb8\x9f\x01\x99\xf0\xb8\xfe\x31\xe8\xb2\x41\xb6\x69\x8b\xd1\x43\xe3\x5b\xce\xb0\x6a\xae\x50\x52\x11\xcf\x4d\x72\x17\xab\x10\xde\x5c\x54\xda\x28\xa7\x26\x2c\xbb\x42\x46\xf6\x6d\x3d\x24\x92\x98\xbe\xe8\x04\x0a\x8e\xdd\x33\x78\x75\xf1\x64\x96\x30\x13\xb1\xb1\x6f\x32\x4b\x6d\xf0\x73\x99\xc5\x1b\xd4\x95\x82\x93\x09\xa8\x19\x13\x8f\xf0\xe9\x9d\xca\x4b\x94\x30\x28\x42\x07\xab\xdd\x26\x4e\xa8\xe7\x0f\x2e\xff\x6e\x64\x10\x33\x11\x97\x9c\x1c\xa3\x17\x49\x25\x12\xf2\xe5\x9e\x93\x1d\xa1\xcc\xec\xc2\x10\x5e\x1d\x24\x58\x09\xd1\xd1\xf6\xa6\x16\x6d\x3e\x27\xe7\xf2\xb5\x26\x55\x49\x1c\x6c\x1d\xb3\x74\x9d\x67\xc6\xeb\x3f\x22\x63\x27\xd6\xff\x57\xea\x64\xc3\xc9\x18\x7c\xa5\xc7\x9a\xd2\x7a\x41\x0b\x04\x3f\x39\x75\x05\xac\x84\x58\xe8\x4d\x1f\x6b\x1b\xa4\x8d\xc0\x8c\x6f\x21\x55\xd3\xed\xa3\xbb\xbc\xb8\x79\x65\x93\xf2\x39\xea\xda\xf2\x94\x27\x2f\x5f\x79\xfa\xf7\x8d\xeb\xe0\xea\xd6\x7e\x19\x9e\x0d\xb9\xe7\xec\xca\xf9\x73\x2d\x89\xc6\xcd\xde\x75\xd6\xfb\x14\x43\xb8\x73\x89\xc7\x7d\x59\xef\x97\xd5\x2f\x39\xdd\xb6\xf5\xff\x73\x89\x47\x25\x10\xfb\xab\xf3\x8e\x0a\x8d\x23\x19\x48\x67\xde\x51\x19\xfe\xaf\x99\x81\xfc\x98\x14\xc2\x84\x62\x99\xc4\xea\xfa\xb9\x29\xe5\x33\xb0\xd5\x26\xc2\x98\x4f\x94\x2b\xe1\x2f\xae\xd7\x68\xd2\xa0\x89\x98\xfb\xbe\x4f\x27\x0f\x3f\x30\x6f\xa9\x8b\x3c\xfa\x82\x51\xa6\xbf\x42\xe2\xaf\xcb\x3a\x4e\xe1\x96\x72\x9a\xd0\x3f\x4c\x90\xfb\xc8\x35\x4d\x10\x62\xa7\x7f\xa4\x59\x06\x00\x21\x21\x46\x86\x66\x35\xfe\x13\x34\x32\x56\x35\x53\x5a\x40\x2c\x80\x40\x6f\x2d\x64\x54\x92\xcf\x07\xf4\xc2\xe2\x08\xaa\xae\x09\xb1\x88\xd4\x79\x24\x78\x84\xa9\x56\xe7\x46\x01\x98\x20\xb1\x3a\xb7\x87\xfd\xa9\x88\xcf\x4f\x35\xca\x84\x72\xab\x04\x81\x58\x1b\xdd\x2b\x96\xb3\xd2\x74\x2d\x49\x84\xb3\xba\xb7\xbc\xe8\xcc\xad\x8c\x68\x77\x19\x57\xed\xc6\xbd\x38\x63\xa8\xcc\xaf\x38\x6e\xa0\x55\x9d\x28\x87\xa4\x52\x6c\x24\x49\x54\x61\xef\x9d\xc7\x74\xd1\xb4\xc8\x0c\x09\x4f\xb5\x32\xdc\xa8\x7d\x55\x49\xda\xec\x74\xfe\x6b\x4f\x06\xab\xa7\x6b\x65\xdf\x46\x42\x66\x43\x59\x75\x90\x10\x78\xbf\xb5\x22\xd1\x83\x59\xe6\xa2\x00\xd5\x6f\xc4\x25\x4e\xaa\x22\x0a\x5f\x1e\x84\xe1\x4f\x05\xe2\xd6\x7e\xba\x12\x72\x96\xba\x12\xab\x01\xce\xe8\x97\x2b\x3c\x5b\x5b\x9a\x57\xe4\xda\xd9\x7f\x18\xdd\x8c\xff\x6b\x69\x63\xd2\x4f\xef\xe6\xf3\xd1\xdd\xe7\xf1\x70\x34\x19\xdc\xb6\x4a\xf2\x41\x8a\x24\x6c\x34\x80\xf7\xc0\xb7\x24\xfd\x84\x7b\x7f\x9c\xdb\xfc\xb5\x9f\x0a\x36\x7f\x76\x2f\x1f\x96\x1c\x1b\x33\xfe\x85\x50\x17\x77\x99\xd9\x3d\x01\xee\x2f\x83\xf1\x62\xf9\x61\x7a\x57\xe6\x3a\x1d\x00\x37\xa3\x75\x5b\xd7\x40\x0d\x2b\xa2\xb0\x28\xb0\x3f\xbc\x73\xfa\x6a\x89\xb7\x33\x9c\x4c\xaf\x9e\x89\xde\x9a\x22\x8b\x3b\x60\xb3\x6d\x33\xa2\xb7\xa1\x75\x07\x7d\xc3\x7c\x72\x88\xc8\x70\x2b\x4c\x3a\x9d\x2b\x5d\xfd\x34\xf1\x50\xc6\xe1\xe0\x66\x3c\x9c\x2e\x27\xa3\xc5\x2f\xd3\xbb\x4f\xe3\xc9\xf5\xf2\x72\x30\xfc\x34\x9a\x5c\xfd\xa8\x25\xaf\x1f\x78\x36\x27\xe7\x43\x69\x13\xc9\xd8\x3a\x46\x8c\x5c\xd3\xb5\x53\xee\xb8\x2c\xdd\x9b\xf6\xf6\xe9\xde\xdc\xcf\x17\xa3\xbb\xa3\xdb\xeb\x9d\x3a\x5b\x6d\xd2\xa6\x02\x98\xe8\x3d\x88\x51\x63\x64\x13\x55\xb8\xbc\x9e\xc1\x78\x66\xbc\x92\x44\xa5\xda\xc1\x1d\xcf\x3a\x78\x90\x4c\x0b\x47\xab\xc9\xc6\x57\x75\xc6\xb3\xc6\xd8\xc6\x7a\x8d\x67\x9f\xdf\xce\xa6\xd3\x9b\xe5\x41\xc7\x92\xc9\x80\x3d\x92\xfd\x81\x8d\x30\x8a\x7c\xbb\xb8\x77\x9b\x26\xe3\x1c\x19\xc4\x26\x44\x41\x77\x1b\xc0\x44\x2f\x29\xb5\xb7\x03\x5c\xfe\x1d\x1f\xb1\x14\xe3\xd9\x78\x32\x9e\xdd\x2e\xee\x7f\x94\xb2\xe4\xc7\xdc\x4d\x3b\x68\xb5\xc1\x56\xc1\x60\x3c\xdb\xbd\x85\x54\x08\x66\x2f\x3a\xd8\x0c\xce\x6c\x61\xa5\x89\xd4\x59\x6a\xe6\xcb\x05\x47\x40\xeb\xd7\xfb\x36\xb3\x1b\xcf\x54\x7e\x70\xd7\x20\x1c\x6d\x85\x42\x0e\x6b\x29\x12\x57\x57\x90\x84\x6f\xb0\x0f\xc3\x2d\xe1\xae\xc8\x65\x3e\xba\x03\x14\xb2\x36\x9a\x5a\xbd\x3b\xe1\x88\x6e\xc9\xae\x49\x96\x0b\x1f\x7d\xf4\x5d\x8e\xa4\xb6\x22\x63\x31\xac\x4d\x68\x65\xe2\x60\xca\xe1\xf7\x20\xc8\x4b\xd0\x11\x8d\xe5\xef\x47\x77\x73\xa1\x1d\xc3\xf1\xd5\x5d\x87\x76\xbc\xba\xe8\xbf\x79\xdd\xbf\xe8\x5f\x9c\xbf\x7a\xdd\xd4\x91\xbc\x74\x67\xeb\x75\x79\xfd\x4e\x09\xf8\xdd\x1e\xe2\x6a\x66\xbe\xa9\xdf\x6d\x46\xd5\xa1\xf9\x5e\x90\xab\xf1\x7c\x70\x79\x33\xb2\x27\xbc\xcb\x9b\xe9\xf5\xf5\x78\x72\xfd\x4c\xa3\xeb\x0e\x40\xf3\x2b\x4e\x66\x11\x8d\x43\x2f\x96\x97\x44\xf9\xdd\x85\xc1\x70\x38\x9a\x2d\x8e\x39\xb6\xab\xd1\x87\xc1\xfd\xcd\x62\x34\xb9\x9a\x4d\xc7\x93\xc5\x62\xfa\x71\x3a\x5f\x0c\x6c\x19\xad\x6b\x0b\x59\x9a\x5d\xf0\x8c\x67\xbb\x9f\x8d\x2e\xb5\x97\x29\x0f\x37\xcb\xe7\x9f\xe7\xf7\xb3\x46\x69\xa7\xca\x6d\x4d\x98\x3a\x82\x41\xa5\x90\x7a\x50\x6e\x6d\x32\x3b\x5e\xb4\xed\x2e\xdb\x36\xe9\x74\x17\xf4\xba\x57\xce\x16\xcf\xa8\xde\x0f\x05\xd7\xf8\x45\xd7\xb7\x78\x2a\xe9\x8e\x32\xdc\x60\x5c\xcb\x41\xa0\xed\x52\x5f\xfe\xf9\x1f\x19\x2a\xad\x9a\xa6\x22\x4a\xb3\x10\x5e\xff\xfd\x22\xa9\x7c\xef\xac\x87\x81\x8d\x8c\xaf\x51\x37\xa9\xa4\xd6\xa1\x9e\xb7\xd4\xb5\xc0\x97\xf5\x43\x78\x7f\xf1\xfe\x7d\xa3\xc1\xe8\x60\x08\xf6\xce\x85\xf9\xb3\x3e\xc5\x83\x72\x52\xb5\xb5\xb5\x24\xd6\xe8\xb3\x26\x94\x65\x12\x17\x5b\x89\x6a\x2b\x58\x1c\xc2\xcf\x35\x9c\xba\x8a\x66\x6d\x65\xb3\x8e\xc2\x99\x59\xe8\xf3\x15\xe5\xe7\xed\x81\xb0\xeb\x10\xac\xa8\x8c\x03\xc3\x6f\x7f\xd8\x66\x6f\x55\xb6\x34\x1e\x9b\xfe\x4e\xb0\x2c\xc1\x5b\x7b\x8f\xb9\x59\xc8\x4b\xcc\xd7\x59\xbe\x1c\xab\xf3\x44\x98\xb4\xb1\xb9\x22\x4e\x39\x19\x5d\x05\xed\xed\x46\x1e\x93\xf3\x1d\x68\x57\x93\x85\xcc\xf8\xf9\x17\x6d\xf6\xb1\xea\x33\xd1\xa8\x13\xe6\x7c\x7c\x87\xa0\xa5\x43\xc9\xc8\x6e\xdb\x23\x9c\x76\x44\x5a\x6e\x0e\xe9\x56\x3e\x3b\x22\x03\x99\xf1\xa0\xb5\xcb\xf3\x38\x19\xe8\x9e\xe0\x64\xd0\x7b\x16\x27\x5f\xba\x2b\x13\xb1\x5a\xed\xae\x52\x93\x5b\x51\x4e\x24\xc5\x6a\xf6\x66\x72\xb3\xc3\x3b\x67\xce\xb5\xd4\xae\x99\x1d\xa4\x68\x9e\x49\x10\x71\xfa\x64\x8a\x56\xb9\xe9\x58\x76\xcd\x15\x1f\x7e\xeb\x9d\x57\x88\xf5\xd5\xd6\x5f\x23\x76\xbf\x96\x44\xce\xc4\xd5\x20\xd6\x6e\x7a\x93\x71\x4d\xe8\x22\x8c\xe8\xf0\x7c\x93\xf1\x72\x38\x9d\x7c\x58\x76\x45\xfe\xd6\xf7\x7a\xfc\xfb\x86\x30\xa3\xea\x20\x0c\x9c\xbb\x7b\x17\xd6\xce\xd8\x9b\x16\xcf\xcd\x3d\xda\xee\x9c\xbd\x68\x1e\xd2\x7e\xd7\xb0\xf3\x92\x61\x27\x96\x3e\x33\x59\xba\xbb\x62\x3f\x2c\x2b\x39\xb8\xb8\xd8\xcc\x4c\x26\x63\x1b\x56\xbb\x0c\xbb\xb8\x18\xd3\x39\xad\x7f\xad\xa0\xf9\x6b\xed\xb2\x51\xc7\x73\x91\x6a\xb3\xdf\x8c\xf7\x68\x35\x31\x11\xa7\xc1\x8a\xf2\x20\xa6\xf2\x29\x52\xa8\x23\x4b\x8a\xa3\xee\xc7\x9d\xc4\x38\xea\x0a\x31\x27\x6b\xad\xca\x74\xaf\x5c\x89\xa3\x52\xaf\x39\x34\x27\xed\x3e\xc3\x88\x61\x25\xaa\xfb\xb0\x6e\x37\x14\x3c\x65\xb2\x8f\x52\xec\xf0\x05\xc1\x53\xd6\xf9\x49\xa2\x2d\x66\x3f\x38\xee\xc4\x8e\x92\x3c\xea\x1d\xdd\x39\xc2\x07\xca\x70\x2a\x87\xd5\xe7\x05\xc5\x5a\x54\x76\xf9\x70\x32\x6e\xa9\xbe\xb5\xaa\xc8\x51\x89\xda\xb4\x2e\xe8\x54\x92\x27\xc9\xd5\x35\xef\xe0\x99\x43\xf3\x96\x64\xfe\x5a\xe0\x1b\x0f\x7c\xf2\x13\x30\x87\x96\x2d\x99\x5b\xd7\x92\x29\x2d\x92\x3b\x1f\xf7\x5e\xe1\xda\x06\x87\x82\x2b\x7b\x16\x8d\xb1\x49\xd2\xcb\xf7\x06\x95\x62\x67\xf9\x1a\x07\x12\xab\xec\x8d\x7b\x88\xb4\x3c\xab\xea\x78\x9e\xd1\xc1\xb9\x36\x41\x3f\xc3\x96\xe7\x33\xfd\xd6\xc7\x39\xe5\xa1\x55\x24\x8c\x86\xf8\x6a\xcd\x09\xc0\xc6\x3d\xe7\x68\x1f\x05\xf9\x9b\x06\x0b\xbb\xc7\xd0\x1f\x8d\x59\x61\x6d\xfa\x33\xac\x0a\x60\x1b\x53\x96\x49\xc2\x5a\xe5\xb3\xed\x8a\xf2\x4d\xc6\x88\x6c\xeb\x71\xb8\xe2\x7f\x15\x68\x0e\xb3\xfc\x59\xd1\xcb\x02\x75\x79\x3d\x9b\x21\xca\x1a\x3a\xb5\x07\x4e\x25\x24\xfe\x73\xcb\x0b\x9f\xbf\x1c\x88\x1f\xa9\x3a\x97\xd7\xb3\x6e\xc5\x69\x7f\xd1\x55\xc3\xa8\xae\x34\xdf\x1b\x2c\xff\x90\xec\x65\x21\x1a\xcf\x66\x42\xb0\x1a\x30\xd5\x07\x6d\x25\x1c\xee\xeb\x77\x07\xa1\xf6\xa2\xed\x65\xa1\xf8\x28\x94\x1e\x79\xd6\x35\x40\x0e\x5f\xd9\x95\xb0\x54\xdb\xbe\x3b\x38\x2d\x4f\x01\x5f\x16\x22\x4f\x67\x5c\x0a\x50\x03\xaa\xeb\xa9\x62\x09\xd7\x61\x8f\xef\x0e\x5a\xeb\x7b\xcc\x97\x85\xed\xda\x8a\xe0\x4f\xdf\x67\xd6\x91\xd7\x70\xeb\x7e\x32\x5a\x22\x77\xd8\x67\xff\xb2\xd0\x29\x7c\xe9\x0d\x59\x83\x6d\x8e\xba\x1b\xb3\xe2\x21\x6d\x07\x5e\x0a\xbf\xff\xe6\xfc\x26\x0d\x9b\xe4\x11\x63\xfc\xa7\xd1\xea\x56\xaf\xe3\x8a\xd5\x50\xa9\xff\x0f\x00\x00\xff\xff\xe8\x92\x39\x92\x61\x41\x00\x00"

func netCalicoYamlBytes() ([]byte, error) {
	return bindataRead(
		_netCalicoYaml,
		"net/calico.yaml",
	)
}

func netCalicoYaml() (*asset, error) {
	bytes, err := netCalicoYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "net/calico.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0xab, 0x12, 0xe7, 0x5d, 0x12, 0x16, 0xd1, 0xb9, 0x12, 0xdc, 0x3d, 0x67, 0x59, 0x28, 0x91, 0x61, 0xe2, 0x1a, 0x5, 0xad, 0x7, 0x60, 0xf6, 0x5, 0xd, 0x5e, 0x33, 0x10, 0x4b, 0x61, 0x1e}}
	return a, nil
}

var _netFlannelYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x73\xdb\x36\x13\xbe\xf3\x57\x60\x78\x36\x3f\x94\xe4\xcd\xbc\xe5\xcd\xb1\xd3\x9c\xe4\x7a\xe2\x4e\x2f\x9d\x4e\x07\x02\x57\x14\x62\x10\x80\x81\x85\x6c\xb5\xf5\x7f\xef\x80\x22\x25\x50\x94\xe4\x34\x71\xc6\x33\x32\x79\x22\x16\xbb\xcf\x7e\x60\xb1\x0f\x67\x98\x24\x49\x74\xcb\x65\x59\x90\x0b\xe1\x2c\x82\xf9\xac\x04\x44\x54\xf3\xdf\xc0\x58\xae\x64\x41\xcc\x8c\xb2\x94\x3a\x5c\x28\xc3\xff\xa2\xc8\x95\x4c\x6f\xff\x6f\x53\xae\xb2\xe5\x64\x06\x48\x27\x51\x0d\x48\x4b\x8a\xb4\x88\x08\x91\xb4\x86\x82\xcc\x05\x95\x12\x44\x64\x9c\x00\xeb\xc5\x09\xa1\x9a\x7f\x32\xca\xe9\x66\xe9\x9f\x84\xc4\x71\xf3\x6a\xc0\x2a\x67\x18\x04\x3b\x5a\x95\xb6\x59\x2c\xc1\xcc\x02\x79\x05\xf8\xdf\xc1\xa4\x2a\x61\x2f\x9a\xe0\x16\x37\x8b\x7b\x8a\x6c\xf1\x8d\xe0\x99\x45\x8a\x6e\xaf\x0f\xdd\xc0\xee\xad\xf2\x07\x2e\x4b\x2e\xab\xe7\x2b\xb6\x12\xf0\x19\xe6\x7e\xa3\x4b\xe1\x08\x60\x44\xc8\xf0\xdc\x77\x21\xad\x9b\x7d\x01\x86\xb6\x88\x92\x56\xfb\x06\xcc\x92\x33\x38\x67\x4c\x39\x89\x03\x83\xf5\xda\x6a\xca\xa0\x20\xb7\x6e\x06\x89\x5d\x59\x84\xba\xa9\x40\x98\xe8\x72\x12\xed\x05\x3c\x9c\xde\x51\xe8\x36\x15\x25\xe7\xbc\x9a\x52\xbd\xeb\x6a\x88\xda\x00\xb4\xd0\x09\x9b\x57\x87\xe1\x09\x11\x74\x06\xa2\x3d\x53\xe4\x60\x8a\xe6\xd4\x9b\x25\xd5\x7a\x1b\x61\xe7\x81\x49\x9e\x30\x25\xe7\xe9\x17\xeb\xfd\xff\xd3\x68\xfe\xdd\xb6\x44\xec\xdd\xc4\x05\x89\xd9\xcc\xe4\xf1\x59\x27\xd5\xc2\x55\x5c\xda\xb8\x20\xbf\xb7\xa2\xad\x49\xa3\x80\x2b\xdd\x98\xb5\xce\x36\x96\xcd\x66\x09\x02\x2a\x8a\x5e\x21\x34\x22\x24\x5e\x50\x6e\x34\x97\x53\x55\xfa\x4d\x34\x0e\xce\xfa\x0a\xdc\x5e\xc2\x9c\x3a\x81\x9f\x28\xc2\x3d\x5d\xb5\x5a\x81\xd2\xe3\xe6\xfd\xf1\xec\x78\x6c\x5a\x19\xac\xa9\xee\xc7\xc6\xa8\xa6\x33\x2e\x38\x72\xb0\xc3\xf8\xbc\xc9\x94\x6a\xcd\x65\x65\x8f\xba\x6e\xdf\xfe\x88\xba\x95\x04\x3c\x52\xe5\x2b\xc0\x7b\x65\x6e\x7d\x54\x93\x3c\x7d\xfb\x26\xcd\xd3\x3c\x9b\xbc\xd9\x16\xfc\x03\x65\xb7\x20\xcb\x5e\x44\xf1\xaf\x6d\x22\xcb\x07\x41\x65\x1c\x85\xae\x1f\x07\x2d\x0c\x0f\x08\xd2\xbf\xda\xcd\xe5\x5c\xb7\xe1\x25\x85\x5a\xc9\x1b\xd8\xd7\xcd\xbd\xbe\x2b\x6d\x42\xeb\xf2\xfd\xbb\xe7\x68\x3e\xab\x81\x79\x2d\x84\x5a\x0b\x8a\xb0\xb6\x08\x03\xf0\x4f\x88\xb6\x07\x71\x80\xea\x05\x1d\xb2\x7f\x16\xca\x62\x5b\xda\xde\x61\x79\x84\x1b\x10\xc0\x50\x99\x2d\xba\x2f\x4a\xea\xd3\x31\x12\x10\x9a\x31\x46\x0d\x5b\x14\xa4\xcb\xba\x09\x41\x09\x30\xcd\x64\x0a\xc6\xa6\xd2\x5e\xa6\x4c\x41\x3e\x3e\x70\x8b\x76\x03\x09\xf3\x39\x30\x2c\xc8\x95\xba\x61\x0b\x28\x9d\xe8\x22\xb0\xbd\x39\x72\xb5\x33\x3a\xfc\xc3\x25\xc7\x0b\x25\x91\x72\x09\x26\x1c\xe1\x8d\x2e\x97\x16\xa9\x10\x09\x93\x7c\xe3\x8c\xd7\xb4\x82\x82\xdc\x39\xba\xf2\xb1\x33\x65\x40\xd9\xac\x45\x2d\x96\x79\x3a\xc9\xd3\x3c\x09\x93\x21\x84\xa9\xba\xa6\xb2\xdc\x16\x21\x21\x4c\x6f\x8b\x6b\x2a\x1b\x6e\x25\xf3\x60\x91\x01\xb2\x2c\x6c\x90\xac\x37\x49\x76\x35\x99\xe4\x99\x04\x4c\xcb\x6c\x92\x77\x16\xa9\xd7\x0e\x78\x8d\x90\xa5\x12\xae\x86\xa9\x2f\x4a\xcf\xf3\x3a\xeb\x30\x5b\x42\x6a\xaf\x75\x4d\x71\x51\xec\x78\x18\xd8\xf5\x27\xe7\x21\xfb\x5e\x2e\x51\x57\x9f\x43\x27\x10\x6a\x3f\xf7\x11\x64\x4a\x63\x36\xe3\xb2\xb3\x2c\x0f\x9f\x48\xc2\x75\x52\x53\x7b\xd7\x93\xad\xef\xa4\x9b\xf9\xa1\x53\x57\x66\xb3\x37\xf8\x22\x58\x0b\xef\x1c\x58\xec\xc9\x08\x61\xda\x35\xc3\x28\xaf\xe3\x9e\xbc\x86\x5a\x99\x55\x41\xe2\xff\xe5\x53\x1e\x6e\x09\x5e\xf3\xef\x04\xb1\xc0\x9c\xe1\xb8\xf2\x6d\x0f\x0f\x18\x62\x69\xc3\x97\x5c\x40\x05\xe5\xce\xd4\x05\xb9\x1c\xf6\xc9\xf5\x2f\x97\x7f\x5e\x9d\x4f\x3f\x06\x00\x4b\x2a\x1c\xfc\x6c\x54\xdd\x8f\x70\xce\x41\x94\xed\x67\xc8\x40\xbe\xee\x8d\x6e\x28\xa5\x1e\xfb\xa0\xab\x9b\xeb\xf3\x8b\x1f\xe0\xaf\x19\xb2\x5f\x79\x3b\x8c\x93\x07\xba\x3b\xdc\xf9\xfe\x3b\xb1\x8e\xe2\xc9\x00\xfc\xf0\x6d\x90\x7a\xa9\xea\xc3\x11\xf5\x6f\xf7\x51\xf3\x6f\xb9\xee\xac\xfb\xdc\xea\x23\x1e\xf8\xc0\xfa\x31\xf4\x69\xea\xd7\x48\x9f\x6d\xd6\xe4\x24\xe8\x33\x48\x66\xa4\xcf\x97\xa1\xcf\xa7\x8e\x60\xa4\xcf\x91\x3e\x47\xfa\x3c\x49\xfa\x7c\x8d\xe4\x79\x42\xd4\x39\x12\xe7\x0b\x13\xe7\x48\x9b\x23\x6d\x3e\xed\x6f\xa4\xcd\x53\xa2\x4d\xad\xd9\xfb\x77\x9b\xdf\x25\xaf\x87\x3a\xb7\x79\x93\x53\xa0\xcf\x7e\x3a\x23\x85\xbe\x08\x85\x7e\xc5\x21\x8c\x34\x3a\xd2\xe8\x48\xa3\xa7\x47\xa3\xf6\xed\x4f\xf9\xc3\xab\x23\xd1\x2e\x6b\x72\x0a\x14\x1a\x26\x33\x12\xe8\x8b\x10\xe8\x93\x47\x30\xd2\xe7\x48\x9f\x23\x7d\xbe\x28\x7d\xfe\x1b\x00\x00\xff\xff\xfc\xf5\x36\x47\x66\x29\x00\x00"

func netFlannelYamlBytes() ([]byte, error) {
	return bindataRead(
		_netFlannelYaml,
		"net/flannel.yaml",
	)
}

func netFlannelYaml() (*asset, error) {
	bytes, err := netFlannelYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "net/flannel.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x7e, 0x79, 0xf6, 0xaf, 0x57, 0x27, 0x9, 0x6a, 0xfb, 0x87, 0x22, 0xaf, 0x46, 0x98, 0x7c, 0xd7, 0xd7, 0x4d, 0xa3, 0x9b, 0xd5, 0x45, 0x5d, 0x0, 0x5a, 0xa9, 0xc8, 0x8, 0x37, 0x5c, 0xaa}}
	return a, nil
}

var _netWeaveYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6f\xdb\x36\x10\x7f\xef\x5f\x71\xf0\x4b\x36\x6c\x92\xec\xf4\x2b\x20\x30\x6c\x5d\xd2\x66\x03\x9a\x0f\xc4\xe9\xde\x29\xea\x6c\x73\xa6\x48\x8d\x3c\x29\xf1\xba\xfc\xef\x03\x25\xdb\x95\xf5\x61\xa5\x6b\x37\x24\x58\xf4\x24\x1d\xef\x7e\x3c\xde\xc7\x8f\xa4\x78\x26\x7f\x43\xeb\xa4\xd1\x0c\x8a\xc9\xb3\xa5\xd4\x09\x83\xf7\xd2\xd1\x33\x49\x98\x3a\xf6\x0c\x20\x80\x86\x12\x00\x40\xa5\x38\x45\x5b\x48\x81\x6f\x84\x30\xb9\xa6\x72\x20\x45\xe2\x09\x27\xce\xca\x2f\x00\xcd\x53\x64\x70\x83\xbc\xc0\x40\x23\xad\xa5\x5c\x6b\x43\x9c\xa4\xd1\x6e\xa3\x08\x20\x94\xc9\x93\xb0\x54\x0d\x6f\x8c\x5d\xba\x48\xf1\x5c\x8b\x05\xda\x40\xea\x99\x61\xf0\x57\xb0\xd5\x05\xf8\x58\x7b\x07\x18\x19\x2b\xe7\x52\x73\x15\x58\xfc\x23\x47\x47\x23\xd6\xd0\x00\x18\xe5\x56\x8d\x18\x8c\xa2\xe5\x91\x8b\x8a\x49\x38\x19\x47\x1a\x29\x5c\xf1\x54\xfd\xb8\x3c\x72\x41\x51\xad\xf1\x87\x49\x38\x39\x1c\x7d\xdf\x34\x4e\x38\xa1\xb7\x3e\x33\x1a\x4e\x50\xc0\xe4\x35\x1c\x8e\x27\x47\x30\x9e\xb0\xe7\xaf\xd8\x8b\xe7\x70\x7a\x76\xfd\xdd\x78\x3c\x1e\xc3\x37\x1f\xae\x8f\xbf\x1d\xed\xd8\xdf\xed\xc2\x8d\x30\xe5\x52\x05\x3c\x49\x2c\x3a\xe7\x51\x5d\x9e\x65\xc6\xd2\x4f\xb5\xd5\xd7\x11\xee\xd6\xef\x8a\xc7\xa8\x6a\x21\xeb\x8e\xae\x97\xba\x8c\x0b\x64\xb0\xcc\x63\x0c\xdc\xca\x11\xa6\xad\x54\xda\x98\x8b\x90\xe7\xb4\x30\x56\xfe\x59\x26\x23\x5c\x1e\xb9\x50\x9a\xa8\x98\xc4\x48\xbc\x9e\xe9\x63\x95\x3b\x42\x7b\x65\x14\x3e\xa5\xf9\x41\xa4\xd9\xe6\x0a\xb7\x2a\x65\x62\x4f\xad\xc9\xb3\x9a\x95\x17\x1f\x1c\x6c\x3f\x2d\x3a\x93\x5b\x81\x0d\x8d\xcc\x24\x6e\x47\xb0\xad\x9e\x86\xd8\x24\x35\x49\x81\x36\x6e\x00\xcd\xb7\x69\xaf\xbe\x95\x67\x91\xba\xe0\x86\x93\x58\x0c\x39\xac\x91\x7c\x58\xa4\x9e\xaf\x8b\x71\xc8\xff\xb5\x41\x66\x94\x14\xf2\xbf\xf0\x70\x38\xa4\x65\xa8\x22\x47\x9c\xf2\xbd\xfe\x64\xb5\xe9\x2a\x49\x9e\xf9\xfa\xfb\x5a\x9d\xfa\xb3\xd4\x89\xd4\xf3\xa7\x86\x7d\x18\x0d\x6b\x14\x5e\xe1\x6c\xa3\xd4\xcd\xab\xbd\x89\x59\xd7\xe2\x9e\x5a\x28\x35\x5d\x1e\xff\x8e\x82\x6a\xc4\xd0\xbb\x53\xf7\x4f\xf6\xaf\xec\x20\x4f\x5b\xc7\x83\xa9\xc4\x3d\xf9\xfd\x82\x7d\xe5\xdc\x63\xee\x6a\xb5\x0b\xab\x87\x31\x85\xd1\x33\x39\x4f\x79\xf6\x59\xfc\xbd\x65\xcb\xcf\x75\xf5\x1f\xcd\x2e\x2c\x7e\x29\x37\x3f\x91\xf2\xe3\x6a\x85\x2e\xc6\x7e\xa4\x54\x8d\xb7\x84\xda\xbf\xba\x8e\xba\x3c\xe1\x98\x1a\x3d\xc5\xa7\x2b\xdc\x23\xa8\x4a\x97\xa1\xd8\x98\xa7\x52\x5f\x21\x4f\x56\x53\x14\x46\x27\x8e\xc1\xcb\xf5\x00\x61\x9a\x29\x4e\xf8\x69\x9e\x66\x56\xbb\x7c\xd9\x57\x67\xf5\x69\xcb\x54\x1b\x4d\x5c\x6a\xb4\x0d\xfb\xa0\x8e\xd0\xc8\x80\x30\x69\xca\x75\xc2\x1a\x62\x6f\x14\x2d\x4c\x8a\x51\x69\xb4\xae\x99\xd0\x2d\x1a\x7a\xa8\x8b\x2e\xd3\x6a\xbe\x5f\x2e\xa6\xd7\xe7\x6f\xce\xde\xb6\x14\x00\x0a\xae\x72\x7c\x67\x4d\xda\xb6\xf6\xcf\x4c\xa2\x4a\x6a\x7d\xde\x7c\x3a\x7e\x7f\xf4\x80\x5c\x72\x5a\xb0\x32\x52\xa1\xbf\x03\xf8\x1d\xb1\xa1\x2e\x53\x3e\x47\x06\x07\x89\x11\x4b\xb4\x7e\x97\x28\x97\x5c\xf5\x4a\x15\x74\x9f\x6f\x76\x18\xbe\x0c\xc7\x07\x0d\x63\x8b\x3c\x91\x1a\x9d\xbb\xb4\x26\xc6\xb6\xbb\x0b\xa2\xec\x14\xa9\x6b\x1d\x0b\xe3\x88\xc1\xe4\xf0\x75\x38\x0e\xc7\x61\xd7\x22\xb2\xd2\xf7\xe6\xad\xa5\x36\x6e\x2c\x31\x78\xf5\xfa\xe8\x45\xcb\xab\x8e\x4d\x75\x33\x54\x36\x72\xc7\x08\x80\xc8\x72\x06\x93\x71\xda\x18\x72\x28\x72\x2b\x69\x75\x6c\x34\xe1\x6d\xc7\x5a\x32\x2b\x0b\xa9\x70\x8e\x09\x03\xb2\x79\x33\xc0\x85\x51\x79\x8a\x67\x9e\x3a\x3b\xa6\xdd\x29\xce\x24\xee\x70\x2b\xf5\x96\x55\x1e\xa3\x3e\xad\x0d\x8a\xd0\x32\x88\xa5\x1e\x40\xf1\xa1\x8f\x4c\x46\x43\x30\x87\xf7\xc1\xf1\x5d\xb2\x17\xc8\x9f\x65\xee\x03\x84\x24\x7a\x71\x92\xb8\xb3\x02\x5a\x18\x05\xb7\x91\x92\x71\xd4\xa9\xbf\x01\x53\x32\x0e\x52\x93\xf8\x53\xe5\x00\xa6\x87\xea\xd3\xdc\xa0\xdd\x12\x8f\x15\xba\x40\x19\xb1\x1c\x80\xb3\xb9\x8e\xd6\xea\x61\x4b\x3d\xd8\xe5\xb9\xac\x19\x8c\xff\x07\xd5\xe8\x4c\xf4\x31\xcd\xe3\xeb\xe9\xaf\x53\x1a\xbe\xb0\xcf\xab\x5f\x4a\x2d\x5f\xfc\xd8\xe5\xaf\x27\x2d\xb9\x45\x47\xdc\xd2\xa5\x51\x52\xac\x18\xbc\x51\x37\x7c\x55\x2f\xe1\xbd\xeb\x77\xf8\x5e\xea\xfc\xf6\x22\xab\x8e\x52\xf0\xf1\x6e\xc7\xb2\x7e\x16\x3c\xef\xd9\x9a\x01\xc8\x28\xb4\xcd\xc3\x58\x15\x1c\x9c\xcd\x50\x10\x83\x73\x33\x15\x0b\xf4\xdd\xd5\x08\x8e\xc9\xbc\xa9\xb1\x0c\xde\xde\x4a\x47\x75\xc7\xab\xc0\xef\xdb\xe0\x5b\xec\x58\xc6\xc8\x47\xb9\x9d\xe4\x2a\xf6\x1b\xd2\x68\x9f\x0f\xf6\xd3\xea\x20\x70\x93\x62\x07\xe8\x75\x10\xaf\x45\xb5\x03\x34\x3b\x08\xd8\xa4\xdc\x3d\x74\x7b\xef\x28\xb6\x6c\x87\x69\x77\x10\xbb\x8f\x87\xef\xd1\x68\x83\xd8\x7b\x49\xd9\x3f\xb4\xca\x90\xc1\x3b\xa9\xf0\xc2\x1e\x6f\x6e\xdc\xfe\xa9\x2e\xfb\x53\xb2\x9c\x70\xbe\xfa\x34\x41\x65\x70\x65\x94\x92\x7a\xfe\xa1\xfa\x23\xf0\x77\x00\x00\x00\xff\xff\x3a\x20\x4a\x5e\xd6\x1a\x00\x00"

func netWeaveYamlBytes() ([]byte, error) {
	return bindataRead(
		_netWeaveYaml,
		"net/weave.yaml",
	)
}

func netWeaveYaml() (*asset, error) {
	bytes, err := netWeaveYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "net/weave.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xbf, 0x79, 0x7a, 0x6f, 0xc6, 0xcb, 0x47, 0x85, 0xaa, 0xdb, 0xdd, 0xf7, 0x44, 0xbd, 0x64, 0xe8, 0x36, 0xc9, 0xed, 0x89, 0x4, 0x22, 0x27, 0xd2, 0x38, 0x5, 0x92, 0xc7, 0x22, 0x4b, 0xc3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"addon-images": addonImages,

	"registry.yaml": registryYaml,

	"net/calico.yaml": netCalicoYaml,

	"net/flannel.yaml": netFlannelYaml,

	"net/weave.yaml": netWeaveYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"addon-images": &bintree{addonImages, map[string]*bintree{}},
	"net": &bintree{nil, map[string]*bintree{
		"calico.yaml":  &bintree{netCalicoYaml, map[string]*bintree{}},
		"flannel.yaml": &bintree{netFlannelYaml, map[string]*bintree{}},
		"weave.yaml":   &bintree{netWeaveYaml, map[string]*bintree{}},
	}},
	"registry.yaml": &bintree{registryYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
